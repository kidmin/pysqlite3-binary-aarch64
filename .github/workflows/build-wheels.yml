name: Build wheels

on:
  push:
    tags:
      - "v*"

env:
  SQLITE_YEAR: 2024
  SQLITE_VERSION: 3460100
  SQLITE_VERSION_DOTTED: 3.46.1
  SQLITE_HASH_SHA3_256: af6aae8d3eccc608857c63cf56efbadc70da48b5c719446b353ed88dded1e288
  PYSQLITE_VERSION: 0.5.3
  PYSQLITE_URL: https://files.pythonhosted.org/packages/89/07/b9eb4647864581dcfe71c9d662c4067dc24970ab63f58ac7cef13dfd42e5/pysqlite3-0.5.3.tar.gz
  PYSQLITE_HASH_SHA256: 54a98e05b087c2c064c8d5b58e9b8f403082eadf830d7d30ede4ecf6a5a5f143

jobs:
  build_wheels_amd64:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read

    strategy:
      matrix:
        include:
          - python_version: cp311
            libc_version: manylinux2014
          - python_version: cp312
            libc_version: manylinux_2_28
#         - python_version: cp313
#           libc_version: manylinux_2_28

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Download SQLite3 source
        run: |
          curl --connect-timeout 5 --max-time 30 --location -o sqlite-amalgamation.zip 'https://www.sqlite.org/${{ env.SQLITE_YEAR }}/sqlite-amalgamation-${{ env.SQLITE_VERSION }}.zip'
          sqlite3_dist_hash=`openssl dgst -sha3-256 -hex sqlite-amalgamation.zip | awk '{ print $NF; }'`
          echo "computed hash: ${sqlite3_dist_hash}"
          if [ x"${sqlite3_dist_hash}" != x"${{ env.SQLITE_HASH_SHA3_256 }}" ]; then
            exit 1
          else
            exit 0
          fi

      - name: Download pysqlite3 source
        run: |
          curl --connect-timeout 5 --max-time 30 --location -o pysqlite3.tar.gz '${{ env.PYSQLITE_URL }}'
          pysqlite3_dist_hash=`openssl dgst -sha256 -hex pysqlite3.tar.gz | awk '{ print $NF; }'`
          echo "computed hash: ${pysqlite3_dist_hash}"
          if [ x"${pysqlite3_dist_hash}" != x"${{ env.PYSQLITE_HASH_SHA256 }}" ]; then
            exit 1
          else
            exit 0
          fi

      - name: Extract pysqlite3 source
        run: tar -xzf pysqlite3.tar.gz

      - name: Extract amalgamated SQLite3 source to pysqlite3 build tree
        run: |
          cd pysqlite3-${{ env.PYSQLITE_VERSION }}
          unzip -j ../sqlite-amalgamation.zip sqlite-amalgamation-${{ env.SQLITE_VERSION }}/sqlite3.c sqlite-amalgamation-${{ env.SQLITE_VERSION }}/sqlite3.h

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.20.0
        with:
          package-dir: pysqlite3-${{ env.PYSQLITE_VERSION }}
        env:
          CIBW_ARCHS_LINUX: x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.libc_version }}
          CIBW_BUILD: ${{ matrix.python_version }}-manylinux_x86_64
          CIBW_BEFORE_BUILD_LINUX: >-
            cd pysqlite3-${{ env.PYSQLITE_VERSION }};
            env CFLAGS='-march=nehalem' LDFLAGS='-Wl,-z,now' python3 setup.py build_static &&
            strip build/*/pysqlite3/*.so
          CIBW_BUILD_FRONTEND: 'pip'
          CIBW_REPAIR_WHEEL_COMMAND: >-
            wheel_full_path={wheel};
            cd `dirname ${wheel_full_path}`;
            wheel_filename=`basename ${wheel_full_path}`;
            wheel_filename_dist=pysqlite3-${{ env.PYSQLITE_VERSION }}.nmu+sqlite${{ env.SQLITE_VERSION_DOTTED }}${wheel_filename#pysqlite3-${{ env.PYSQLITE_VERSION }}};
            cp -p ${wheel_filename} {dest_dir}/${wheel_filename_dist%-linux_x86_64.whl}-${{ matrix.libc_version }}_x86_64.whl

      - name: Create layer zip archive
        run: |
          wheel_path=`ls wheelhouse/*.whl`
          wheel_filename=`basename ${wheel_path}`
          mkdir -p layer/python
          unzip -d layer/python ${wheel_path}
          cd layer
          rm -rf python/*.dist-info
          zip -r ../wheelhouse/layer-${wheel_filename%.whl}.zip python

      - name: Upload materials as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-wheel-${{ matrix.python_version }}-linux_x86_64
          path: wheelhouse/*

  build_wheels_aarch64:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read

    strategy:
      matrix:
        include:
          - python_version: cp311
            libc_version: manylinux2014
          - python_version: cp312
            libc_version: manylinux_2_28
#          - python_version: cp313
#            libc_version: manylinux_2_28

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Download SQLite3 source
        run: |
          curl --connect-timeout 5 --max-time 30 --location -o sqlite-amalgamation.zip 'https://www.sqlite.org/${{ env.SQLITE_YEAR }}/sqlite-amalgamation-${{ env.SQLITE_VERSION }}.zip'
          sqlite3_dist_hash=`openssl dgst -sha3-256 -hex sqlite-amalgamation.zip | awk '{ print $NF; }'`
          echo "computed hash: ${sqlite3_dist_hash}"
          if [ x"${sqlite3_dist_hash}" != x"${{ env.SQLITE_HASH_SHA3_256 }}" ]; then
            exit 1
          else
            exit 0
          fi

      - name: Download pysqlite3 source
        run: |
          curl --connect-timeout 5 --max-time 30 --location -o pysqlite3.tar.gz '${{ env.PYSQLITE_URL }}'
          pysqlite3_dist_hash=`openssl dgst -sha256 -hex pysqlite3.tar.gz | awk '{ print $NF; }'`
          echo "computed hash: ${pysqlite3_dist_hash}"
          if [ x"${pysqlite3_dist_hash}" != x"${{ env.PYSQLITE_HASH_SHA256 }}" ]; then
            exit 1
          else
            exit 0
          fi

      - name: Extract pysqlite3 source
        run: tar -xzf pysqlite3.tar.gz

      - name: Extract amalgamated SQLite3 source to pysqlite3 build tree
        run: |
          cd pysqlite3-${{ env.PYSQLITE_VERSION }}
          unzip -j ../sqlite-amalgamation.zip sqlite-amalgamation-${{ env.SQLITE_VERSION }}/sqlite3.c sqlite-amalgamation-${{ env.SQLITE_VERSION }}/sqlite3.h

      - name: Setup QEMU for aarch64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.20.0
        with:
          package-dir: pysqlite3-${{ env.PYSQLITE_VERSION }}
        env:
          CIBW_ARCHS_LINUX: aarch64
          CIBW_MANYLINUX_AARCH64_IMAGE: ${{ matrix.libc_version }}
          CIBW_BUILD: ${{ matrix.python_version }}-manylinux_aarch64
          CIBW_BEFORE_BUILD_LINUX: >-
            cd pysqlite3-${{ env.PYSQLITE_VERSION }};
            env CFLAGS='-mcpu=neoverse-n1' LDFLAGS='-Wl,-z,now' python3 setup.py build_static &&
            strip build/*/pysqlite3/*.so
          CIBW_BUILD_FRONTEND: 'pip'
          CIBW_REPAIR_WHEEL_COMMAND: >-
            wheel_full_path={wheel};
            cd `dirname ${wheel_full_path}`;
            wheel_filename=`basename ${wheel_full_path}`;
            wheel_filename_dist=pysqlite3-${{ env.PYSQLITE_VERSION }}.nmu+sqlite${{ env.SQLITE_VERSION_DOTTED }}${wheel_filename#pysqlite3-${{ env.PYSQLITE_VERSION }}};
            cp -p ${wheel_filename} {dest_dir}/${wheel_filename_dist%-linux_aarch64.whl}-${{ matrix.libc_version }}_aarch64.whl

      - name: Create layer zip archive
        run: |
          wheel_path=`ls wheelhouse/*.whl`
          wheel_filename=`basename ${wheel_path}`
          mkdir -p layer/python
          unzip -d layer/python ${wheel_path}
          cd layer
          rm -rf python/*.dist-info
          zip -r ../wheelhouse/layer-${wheel_filename%.whl}.zip python

      - name: Upload materials as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-wheel-${{ matrix.python_version }}-linux_aarch64
          path: wheelhouse/*

  publish_releases:
    needs: [build_wheels_amd64, build_wheels_aarch64]
    runs-on: ubuntu-latest
    timeout-minutes: 2

    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare files for this release
        run: |
          echo 'wheels only. see README.md for sources.' > +WHEELS_ONLY--SEE_README_FOR_SOURCES

      - name: Release wheels
        uses: softprops/action-gh-release@v2
        with:
          files: |
            */*.whl
            */*.zip
            +WHEELS_ONLY--SEE_README_FOR_SOURCES
